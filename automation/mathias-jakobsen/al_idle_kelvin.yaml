blueprint:
  name: Automatic Lighting - Idle (Kelvin)
  description: |
    Uses the 'Automatic Lighting' integration to create a profile that will turn on lighting when a no trigger is triggered.
  domain: automation
  input:
    al_entity:
      name: AL Entity
      description: The automatic lighting entity that is used to control the lighting.
      selector:
        entity:
          integration: automatic_lighting
    lights:
      name: Lights
      description: The lights that should be turned on.
      selector:
        target:
          entity:
            domain: light
    time_after:
      name: After
      description: The time after which the lights can be turned on.
      default: "00:00:00"
      selector:
        time:
    time_before:
      name: Before
      description: The time before which the lights can be turned on.
      default: "23:59:59"
      selector:
        time:
    illuminance_entity:
      name: Daylight Sensor
      description: The entity that measures the amount of daylight.
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_threshold:
      name: Daylight Threshold
      description: Defines the threshold of daylight below which the lights are turned on.
      default: 100
      selector:
        number:
          mode: box
          min: 1
          max: 100000
          unit_of_measurement: lx
    brightness:
      name: Brightness
      description: The brightness (in %) that the lights should be set to when turned on.
      default: 100
      selector:
        number:
          mode: slider
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"
    color_temp_kelvin:
      name: Color Temperature
      description: The color temperature (in kelvin) that the lights should be set to when turned on.
      default: 3000
      selector:
        number:
          mode: slider
          min: 2200
          max: 6500
          step: 25
          unit_of_measurement: K
    conditions:
      name: Extra Conditions
      description: A list of custom conditions that must be true for the automation to run.
      default: []
      selector:
        object:

max_exceeded: silent
mode: restart

variables:
  al_entity: !input al_entity
  id: >-
    {% set ns = namespace(unique_id=[]) %}
    {% for i in range(0, 10) %}
      {% set ns.unique_id = ns.unique_id + [[0,1,2,3,4,5,6,7,8,9]|random] %}
    {% endfor %}
    {{ ns.unique_id|join("") }}
  illuminance_entity: !input illuminance_entity
  illuminance_threshold: !input illuminance_threshold

trigger:
  - platform: event
    event_type: automatic_lighting_event
    event_data:
      entity_id: !input al_entity
      type: reset
action:
  - service: automatic_lighting.track_lights
    data:
      entity_id: !input al_entity
      lights: !input lights

  - repeat:
      while: "{{ True }}"
      sequence:
        - wait_for_trigger:
            - platform: event
              event_type: automatic_lighting_event
              event_data:
                entity_id: !input al_entity
                type: request
            - platform: time
              at:
                - !input time_after
                - !input time_before
            - platform: state
              entity_id: !input illuminance_entity
        - variables:
            is_request_event: "{{ wait.trigger.platform == 'event' and wait.trigger.event.event_type == 'automatic_lighting_event' and wait.trigger.event.data.type == 'request' }}"
        - choose:
            - conditions:
                - "{{ states(illuminance_entity)|float <= illuminance_threshold|float }}"
                - condition: time
                  after: !input time_after
                  before: !input time_before
                - condition: and
                  conditions: !input conditions
              sequence:
                - choose:
                    - conditions:
                        - condition: or
                          conditions:
                            - "{{ is_request_event }}"
                            - "{{ state_attr(al_entity, 'status') == 'idle' and state_attr(al_entity, 'id') != id }}"
                      sequence:
                        - service: automatic_lighting.turn_on
                          data:
                            entity_id: !input al_entity
                            id: "{{ id }}"
                            status: idle
                            lights: !input lights
                            brightness_pct: !input brightness
                            kelvin: !input color_temp_kelvin
          default:
            - choose:
                - conditions:
                    - "{{ state_attr(al_entity, 'status') == 'idle' and state_attr(al_entity, 'id') == id }}"
                  sequence:
                    - service: automatic_lighting.turn_off
                      data:
                        entity_id: !input al_entity
